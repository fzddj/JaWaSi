package com.makedream.jawasi.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EXERCISE_ITEM".
*/
public class ExerciseItemDao extends AbstractDao<ExerciseItem, Long> {

    public static final String TABLENAME = "EXERCISE_ITEM";

    /**
     * Properties of entity ExerciseItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(2, String.class, "typeName", false, "TYPE_NAME");
        public final static Property PerNum = new Property(3, int.class, "perNum", false, "PER_NUM");
        public final static Property TotalNum = new Property(4, long.class, "totalNum", false, "TOTAL_NUM");
        public final static Property CreateDate = new Property(5, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Days = new Property(6, int.class, "days", false, "DAYS");
    };


    public ExerciseItemDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TYPE_NAME\" TEXT NOT NULL ," + // 2: typeName
                "\"PER_NUM\" INTEGER NOT NULL ," + // 3: perNum
                "\"TOTAL_NUM\" INTEGER NOT NULL ," + // 4: totalNum
                "\"CREATE_DATE\" INTEGER," + // 5: createDate
                "\"DAYS\" INTEGER NOT NULL );"); // 6: days
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExerciseItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getTypeName());
        stmt.bindLong(4, entity.getPerNum());
        stmt.bindLong(5, entity.getTotalNum());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
        stmt.bindLong(7, entity.getDays());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExerciseItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getTypeName());
        stmt.bindLong(4, entity.getPerNum());
        stmt.bindLong(5, entity.getTotalNum());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
        stmt.bindLong(7, entity.getDays());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExerciseItem readEntity(Cursor cursor, int offset) {
        ExerciseItem entity = new ExerciseItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getString(offset + 2), // typeName
            cursor.getInt(offset + 3), // perNum
            cursor.getLong(offset + 4), // totalNum
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createDate
            cursor.getInt(offset + 6) // days
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExerciseItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTypeName(cursor.getString(offset + 2));
        entity.setPerNum(cursor.getInt(offset + 3));
        entity.setTotalNum(cursor.getLong(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDays(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExerciseItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExerciseItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
