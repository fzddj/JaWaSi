package com.makedream.jawasi.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STOCK_NOTE".
*/
public class StockNoteDao extends AbstractDao<StockNote, Long> {

    public static final String TABLENAME = "STOCK_NOTE";

    /**
     * Properties of entity StockNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StockId = new Property(1, String.class, "stockId", false, "STOCK_ID");
        public final static Property StockContent = new Property(2, String.class, "stockContent", false, "STOCK_CONTENT");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
    };


    public StockNoteDao(DaoConfig config) {
        super(config);
    }
    
    public StockNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STOCK_ID\" TEXT UNIQUE ," + // 1: stockId
                "\"STOCK_CONTENT\" TEXT," + // 2: stockContent
                "\"CREATE_DATE\" INTEGER);"); // 3: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindString(2, stockId);
        }
 
        String stockContent = entity.getStockContent();
        if (stockContent != null) {
            stmt.bindString(3, stockContent);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindString(2, stockId);
        }
 
        String stockContent = entity.getStockContent();
        if (stockContent != null) {
            stmt.bindString(3, stockContent);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockNote readEntity(Cursor cursor, int offset) {
        StockNote entity = new StockNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stockId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stockContent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStockId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStockContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
