package com.makedream.jawasi.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EXECISE_ITEM".
*/
public class ExeciseItemDao extends AbstractDao<ExeciseItem, Long> {

    public static final String TABLENAME = "EXECISE_ITEM";

    /**
     * Properties of entity ExeciseItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property CreateDate = new Property(2, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Num = new Property(3, int.class, "num", false, "NUM");
        public final static Property DateKey = new Property(4, String.class, "dateKey", false, "DATE_KEY");
    };


    public ExeciseItemDao(DaoConfig config) {
        super(config);
    }
    
    public ExeciseItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXECISE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CREATE_DATE\" INTEGER," + // 2: createDate
                "\"NUM\" INTEGER NOT NULL ," + // 3: num
                "\"DATE_KEY\" TEXT UNIQUE );"); // 4: dateKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXECISE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExeciseItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate.getTime());
        }
        stmt.bindLong(4, entity.getNum());
 
        String dateKey = entity.getDateKey();
        if (dateKey != null) {
            stmt.bindString(5, dateKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExeciseItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(3, createDate.getTime());
        }
        stmt.bindLong(4, entity.getNum());
 
        String dateKey = entity.getDateKey();
        if (dateKey != null) {
            stmt.bindString(5, dateKey);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExeciseItem readEntity(Cursor cursor, int offset) {
        ExeciseItem entity = new ExeciseItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // createDate
            cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // dateKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExeciseItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setDateKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExeciseItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExeciseItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
