package com.makedream.jawasi.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STOCK".
*/
public class StockDao extends AbstractDao<Stock, Long> {

    public static final String TABLENAME = "STOCK";

    /**
     * Properties of entity Stock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StockId = new Property(1, String.class, "stockId", false, "STOCK_ID");
        public final static Property StockName = new Property(2, String.class, "stockName", false, "STOCK_NAME");
        public final static Property StockAllNum = new Property(3, long.class, "stockAllNum", false, "STOCK_ALL_NUM");
        public final static Property CurrentPrice = new Property(4, double.class, "currentPrice", false, "CURRENT_PRICE");
        public final static Property PlanSalePrice = new Property(5, double.class, "planSalePrice", false, "PLAN_SALE_PRICE");
        public final static Property PlanBuyPrice = new Property(6, double.class, "planBuyPrice", false, "PLAN_BUY_PRICE");
        public final static Property NextPlanBuyPrice = new Property(7, double.class, "nextPlanBuyPrice", false, "NEXT_PLAN_BUY_PRICE");
        public final static Property ShiYingLv = new Property(8, double.class, "shiYingLv", false, "SHI_YING_LV");
        public final static Property ShiJingLv = new Property(9, double.class, "shiJingLv", false, "SHI_JING_LV");
    };


    public StockDao(DaoConfig config) {
        super(config);
    }
    
    public StockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STOCK_ID\" TEXT UNIQUE ," + // 1: stockId
                "\"STOCK_NAME\" TEXT," + // 2: stockName
                "\"STOCK_ALL_NUM\" INTEGER NOT NULL ," + // 3: stockAllNum
                "\"CURRENT_PRICE\" REAL NOT NULL ," + // 4: currentPrice
                "\"PLAN_SALE_PRICE\" REAL NOT NULL ," + // 5: planSalePrice
                "\"PLAN_BUY_PRICE\" REAL NOT NULL ," + // 6: planBuyPrice
                "\"NEXT_PLAN_BUY_PRICE\" REAL NOT NULL ," + // 7: nextPlanBuyPrice
                "\"SHI_YING_LV\" REAL NOT NULL ," + // 8: shiYingLv
                "\"SHI_JING_LV\" REAL NOT NULL );"); // 9: shiJingLv
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindString(2, stockId);
        }
 
        String stockName = entity.getStockName();
        if (stockName != null) {
            stmt.bindString(3, stockName);
        }
        stmt.bindLong(4, entity.getStockAllNum());
        stmt.bindDouble(5, entity.getCurrentPrice());
        stmt.bindDouble(6, entity.getPlanSalePrice());
        stmt.bindDouble(7, entity.getPlanBuyPrice());
        stmt.bindDouble(8, entity.getNextPlanBuyPrice());
        stmt.bindDouble(9, entity.getShiYingLv());
        stmt.bindDouble(10, entity.getShiJingLv());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindString(2, stockId);
        }
 
        String stockName = entity.getStockName();
        if (stockName != null) {
            stmt.bindString(3, stockName);
        }
        stmt.bindLong(4, entity.getStockAllNum());
        stmt.bindDouble(5, entity.getCurrentPrice());
        stmt.bindDouble(6, entity.getPlanSalePrice());
        stmt.bindDouble(7, entity.getPlanBuyPrice());
        stmt.bindDouble(8, entity.getNextPlanBuyPrice());
        stmt.bindDouble(9, entity.getShiYingLv());
        stmt.bindDouble(10, entity.getShiJingLv());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Stock readEntity(Cursor cursor, int offset) {
        Stock entity = new Stock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stockId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stockName
            cursor.getLong(offset + 3), // stockAllNum
            cursor.getDouble(offset + 4), // currentPrice
            cursor.getDouble(offset + 5), // planSalePrice
            cursor.getDouble(offset + 6), // planBuyPrice
            cursor.getDouble(offset + 7), // nextPlanBuyPrice
            cursor.getDouble(offset + 8), // shiYingLv
            cursor.getDouble(offset + 9) // shiJingLv
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stock entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStockId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStockName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStockAllNum(cursor.getLong(offset + 3));
        entity.setCurrentPrice(cursor.getDouble(offset + 4));
        entity.setPlanSalePrice(cursor.getDouble(offset + 5));
        entity.setPlanBuyPrice(cursor.getDouble(offset + 6));
        entity.setNextPlanBuyPrice(cursor.getDouble(offset + 7));
        entity.setShiYingLv(cursor.getDouble(offset + 8));
        entity.setShiJingLv(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Stock entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Stock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
